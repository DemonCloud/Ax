<article class="introduce">
	<header>
		<h3 t=1 style="color:#8a3838">
			<i class="ion-ios-navigate"></i>
			{{#main}}
		</h3>
		<p><b><i class="ion-ios-navigate"></i> Aix</b> is a fast MVR JavaScript Framework.</p>

		<p>It require <b>Struct</b> utils lib, for the sake of better organization application structure with modular architecture<b>( AMD or CommonJS specification )</b>. This is not to replace <b>Backbone</b> or <b>Angular</b> etc, maybe it boring form of entertainment. Of course, it cooperate with <b>React</b> very well.</p>

		<p><b>Struct</b> pass over <b>300 test case by Qunit</b> , and <b>Aix</b> call build with <b>Saucelabs</b>:</p>
		<br>
		<p style="min-height:125px"><img style="display:block; width:100%; max-with:100%; overflow:hidden; zoom:1" src="app/styles/imgs/testing.png" alt="Aix Test by Saucelabs"></p>
		<br>

		<br>

		<div class="it-download">
		<mark style="margin-bottom:20px"><i class="ion-gear-b"></i>&nbsp; Latest version - {{#struct.VERSION}}</mark>
		<p>
			<span>Pack with <code>struct</code></span>
			<a href="app/scripts/libs/aix.c.js" title="download it" alt="download it" rel="download" download='aix.s.js'>
				<i class="ion-android-checkmark-circle" style="vertical-align:-1px"></i>
				aix.s.js (57k)
			</a>
		</p>
		<p style="margin-bottom:0">The compress file with <b>GZIP</b> only <b>19KB</b> </p>
		</div>
		
		<br>
		<p>
			<span class="it-outlink">
				<a href="https://github.com/DemonCloud/aix" target="_blank"><i class="ion-social-github"></i> Encourage a Star</a> 
			</span> 
			<span class="it-outlink">
				<a href="test" target="_blank"><i class="ion-ios-analytics"></i> See Unit test</a> 
			</span>
			<span class="it-outlink">
				<a href="examples" target="_blank"><i class="ion-social-nodejs"></i> More Examples</a> 
			</span>
		</p>

	</header>

	<div class="it-block">
		<h3 class="target" t=2>{{#cap1}}</h3>
		<ul class="it-cap">
			<li>
				<a href="javascript:;" tc=2>
					<i class="ion-gear-a"></i> 
					<b> Struct</b>
				</a>
				<span> - Struct is basic utils in aix, Salute to K&amp;R <b>&lt;The C Programming Language&gt;</b>. It contains more than 100 practical function, also it can be used as a single tool. focus on functional programming, the limits of performance, and the function of packaging more easily</span>
			</li>
			<li>
				<a href="javascript:;" tc=2>
					<i class="ion-ios-pie"></i> 
					<b> Model</b>
				</a>
				<span> - Allows you to easily manage the data , model parse is the Immutable data, who can be monitored. So that data would not be modified by accident. Flexible authentication mechanism, to ensure the availability of data.</span>
			</li>
			<li>
				<a href="javascript:;" tc=2>
					<i class="ion-ionic"></i> 
					<b> View</b>
				</a>
				<span> - The simple view is one of the essential of the app, it provides a flexible way to build the user interface, or use it as container for other view's lib (framework). it was given the complete events emitter and virtual DOM rendering mechanism by default way.</span>
			</li>
			<li>
				<a href="javascript:;" tc=2>
					<i class="ion-social-buffer"></i> 
					<b> Route</b>
				</a>
				<span> - A routing manager for application, support regular expressions to match the router with multiple actions. Detection of hash change and carry any parameters at the same time.</span>
			</li>
		</ul>
	</div>

	<div class="it-block">
		<h3 t=3>{{#cap2}}</h3>
		<!-- example1 -->
		<div class="it-example-info" tc=3>
			Base
		</div>
		<div class="it-example">
			<div class="ite-code">
				<pre class="sh_javascript">
var view = new aix.view({
	template:"&lt;div class='name'&gt;"+
							"Hello &#123;&#123;-name&#125;&#125;"+
					 "&lt;/div&gt;"
});

view.mount(
	document.getElementById("mount1"),
	{ name : "Buke" }
);
				</pre>
			</div>
			<div class="ite-preview">
				<div class="ite-mount" id="mount1"></div>
			</div>
		</div>
		<!-- example1 end -->
		<!-- example2 -->
		<div class="it-example-info" tc=3>
			Two-way Data Binding
		</div>
		<div class="it-example">
			<div class="ite-code">
				<pre class="sh_javascript">
var view = new aix.view({
	template:"&lt;input value='&#123;&#123;-text&#125;&#125;'&gt;"+
					 "&lt;h2&gt;&#123;&#123;-text&#125;&#125;&lt;/h2&gt;",
	events:{
		"change:input":function(){
			 model.set("text",this.value);
		}
	}
});

var model = new aix.model({
	events:{
		change:function(){
			view.render(this.get());
		}
	}
});

view.mount(
	document.getElementById("mount2"),
	{ text: "Hello World" }
);
				</pre>
			</div>
			<div class="ite-preview">
				<div class="ite-mount" id="mount2"></div>
			</div>
		</div>
		<!-- example2 end -->
		<!-- example3 -->
		<div class="it-example-info" tc=3>
			Todo List
		</div>
		<div class="it-example">
			<div class="ite-code">
				<pre class="sh_javascript">
var trim = struct.string("trim");

var view = new aix.view({
	template:'&lt;input id="name" maxlength=10&gt;'+
		'&lt;button id="add"&gt;add&lt;/button&gt;'+
		'&lt;ul&gt;'+
		'&#123;&#123;* each [item,i] in list &#125;&#125;'+
			'&lt;li&gt;&#123;&#123;-cap(item.name)&#125;&#125;'+
			'&lt;b class="del" key=&#123;&#123;-i&#125;&#125;&gt;Ã—&lt;/b&gt;&lt;/li&gt;'+
		'&#123;&#123;* end &#125;&#125;'+
		'&lt;/ul&gt;',
	props:{
		cap: struct.string("capit")
	},
	events:{
		"click:#add":function(){
			var getName = trim(
				document.getElementById("name").value
			);
			if(getName)
				model.moc("list",{ name : getName });
		},
		"click:.del":function(event){
			model.rm(
				"list."+this.getAttribute("key")
			);
		},
		"keypress:#name":function(event){
			// keypress [ Enter ] trigger add action
			if(event.keyCode === 13)
				event.data.self.emit("click:#add");
		}
	}
});

var model = new aix.model({
	data:{
		list:[]
	},
	events:{
		change:function(){
			view.render(this.data);
		}
	}
});

view.mount(
	document.getElementById("mount3"),
	model.get()
);
				</pre>
			</div>
			<div class="ite-preview">
				<div class="ite-mount" id="mount3"></div>
			</div>
		</div>
		<!-- example3 end -->
	</div>

	<div class="it-block">
		<h3 t=4>{{#cap3}}</h3>
		<p>These examples were simple described the behavior of <b>Aix</b> and way of writing. u can get more example in here <a target="_blank" href="examples">More Examples</a>. Flexible and simple way of assembly is main design objective for Aix .</p>
	</div>

	<footer>
		{{#copy}}
	</footer>
</article>


