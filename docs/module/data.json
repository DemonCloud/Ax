{
	"_.?" : {
		"toptitle" : [],
		"api" : [
			""
		],
		"param" : [
			[]
		],
		"paramcall" : [
			[]
		],
		"returnval" : [
			[]
		],
		"info" : [
			""
		],
		"infowarning":[
		],
		"table":[],
		"example":[
			{ 
				"info":"",
				"code":[
					""
				],
				"result":[
					""
				]
			}
		],
		"exampledemo":[
		]
	},

	"_.extend" : {
		"toptitle" : ["_.extend"],
		"api" : [
			"_.extend(proto,extobj,notThisproperty)"
		],
		"param" : [
			["proto","[ 类型:Object ]"],
			["extendobj","[ 类型:Object ]"],
			["notThisproperty","[ 类型:String,Array ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
			["proto or null","[ 返回proto参数对象,或者为空 ]"]
		],
		"info" : [
			"_.extend 函数有两个作用.",
			"1. 在 _ (工具库) 上扩展自定义方法",
			"2. 合并对象，并且可以筛选不需要附加的属性",
			"_.extend 底层调用了_.compose"
		],
		"infowarning":[
		],
		"table":[],
		"example":[
			{ 
				"info":"在 _ 扩展方法，使其可以随处调用",
				"code":[
				"_.extend({",
				"  hello: function(data){",
				"    console.log('hello '+data);",
				"  }",
				"});",
				"",
				"_.hello('aix');"
				],
				"result":[
					"hello aix"
				]
			},
			{ 
				"info":"合并b对象的所有属性到a对象",
				"code":[
				"var a = { a:1 , c:3 };",
				"var b = { a:2 , b:1 };",
				"",
				"_.extend(a,b);",
				"",
				"console.log(a);",
				"console.log(b);"
				],
				"result":[
				"{ a:2,c:3,b:1 }",
				"{ a:2,b:1 }"
				]
			},
			{ 
				"info":"合并b对象的所有属性到a对象 . 并且忽略b对象上的a属性",
				"code":[
				"var a = { c:3 };",
				"var b = { a:2 , b:1 };",
				"",
				"_.extend(a,b,'a'); ",
				"",
				"//合并时忽略了b中的a属性",
				"console.log(a);",
				"console.log(b);"
				],
				"result":[
				"{ c:3,b:1 }",
				"{ a:2,b:1 }"
				]
			}
		],
		"exampledemo":[
		]
	},

	"_.define" : {
		"toptitle" : ["_.define"],
		"api" : [
			"_.define(obj,prop,setting)",
			"_.define(obj,setting)"
		],
		"param" : [
			["obj","[ 类型:Object ]"],
			["prop","[ 类型:String , Number ]"],
			["setting","[ 类型:Object ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
		],
		"info" : [
			"_.define 用于给指定的Object对象定义属性,并且可以设置该属性的参数"
		],
		"infowarning":[
		],
		"table":[],
		"example":[
			{ 
				"info":"_.define 可以定义单个属性，也可以一次性定义多个属性",
				"code":[
				"var a = {};",
				"",
				"_.define(a,'a',{",
				"  value : 1,",
				"  enumerable: false,",
				"  configurable: false,",
				"  writable: true",
				"});",
				"",
				"console.log(a.a);",
				"",
				"_.define(a,{",
				"  'b':{",
				"    value : 2,",
				"    enumerable: true,",
				"    configurable: true,",
				"    writable: true",
				"  },",
				"  'c':{",
				"    value : 3,",
				"    enumerable: true,",
				"    configurable: true,",
				"    writable: true",
				"  },",
				"});",
				"",
				"console.log(a.b,a.c);"
				],
				"result":[
					"1",
					"2,3"
				]
			},
			{ 
				"info":"定义属性时,设置enumerable configurable writable",
				"code":[
				"var a = {};",
				"",
				"_.define(a,'a',{",
				"  value : 1,",
				"  enumerable: false,",
				"  configurable: false,",
				"  writable: false",
				"});",
				"",
				"console.log(a.a===1);",
				"",
				"//无法设置a.a的数值，因为writable定义为false",
				"a.a = 4;",
				"console.log(a.a);"
				],
				"result":[
					"true",
					"1"
				]
			}
		],
		"exampledemo":[
		]
	},

	"_.typeof" : {
		"toptitle" : ["_.typeof"],
		"api" : [
			"_.typeof(varible)"
		],
		"param" : [
			["varible","[ 类型:任意类型 ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
			["typestring","[ 类型字符串 ]"]
		],
		"info" : [
			"_.typeof 用于准确的检测变量类型，并且返回当前变量类型对应的字符串(小写)"
		],
		"infowarning":[
		],
		"table":[
			["类型","返回值"],
			["对象","object"],
			["数组","array"],
			["函数","function"],
			["参数","arguments"],
			["布尔值","boolean"],
			["字符串","string"],
			["数字","number"],
			["正则表达式","regexp"],
			["时间对象","date"],
			["Null","null"],
			["未定义","undefined"]
		],
		"example":[
			{ 
				"info":"使用typeof来检测出变量的类型",
				"code":[
				"console.log(_.typeof(1))",
				"console.log(_.typeof('1'))",
				"console.log(_.typeof([]))",
				"console.log(_.typeof({}))",
				"console.log(_.typeof(true))",
				"console.log(_.typeof(/reg/g))",
				"console.log(_.typeof(null))",
				"console.log(_.typeof(undefined))",
				"console.log(_.typeof(new Date))",
				"console.log(_.typeof(function(){}))"
				],
				"result":[
				"&gt;  number",
				"&gt;  string",
				"&gt;  array",
				"&gt;  object",
				"&gt;  boolean",
				"&gt;  regexp",
				"&gt;  null",
				"&gt;  undefined",
				"&gt;  date",
				"&gt;  function"
				]
			}
		
		],
		"exampledemo":[
		]
	},

	"_.isObject" : {
		"toptitle" : ["_.isObject"],
		"api" : [
			"_.isObject(varible)"
		],
		"param" : [
			["varible","[ 类型:任意类型 ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
			["boolean","[ 是否为对象-布尔值 ] "]
		],
		"info" : [
			"_.isObject 检测变量类型是否为对象类型"
		],
		"infowarning":[
			"Js 中的大多数变量类型都属于对象,比如数组,这也是为什么在Js中有“一切皆对象”的说法"
		],
		"table":[
		],
		"example":[
			{ 
				"info":"使用isObject来检测出变量的类型",
				"code":[
				"console.log(_.isObject(1))",
				"console.log(_.isObject('1'))",
				"console.log(_.isObject([]))",
				"console.log(_.isObject({}))",
				"console.log(_.isObject(true))",
				"console.log(_.isObject(/reg/))",
				"console.log(_.isObject(null))",
				"console.log(_.isObject(undefined))",
				"console.log(_.isObject(new Date))",
				"console.log(_.isObject(function(){}))",
				"console.log(_.isObject(new String('a')))",
				"console.log(_.isObject(new Number(1)))"
				],
				"result":[
				"&gt;  false",
				"&gt;  false",
				"&gt;  true",
				"&gt;  true",
				"&gt;  false",
				"&gt;  true",
				"&gt;  false",
				"&gt;  false",
				"&gt;  true",
				"&gt;  true",
				"&gt;  true",
				"&gt;  true"
				]
			}
		
		],
		"exampledemo":[
		]
	},

	"_.is*" : {
		"toptitle" : ["_.is*"],
		"api" : [
		"_.isFunction(varible)",
		"_.isBoolean(varible)",
		"_.isString(varible)",
		"_.isNumber(varible)",
		"_.isNull(varible)",
		"_.isDate(varible)",
		"_.isRegExp(varible)",
		"_.isNodelist(varible)",
		"_.isUndefined(varible)",
		"_.isHTMLCollection(varible)"
		],
		"param" : [
			["varible","[ 类型:任意类型 ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
			["boolean","[ 是否为该类型-布尔值 ]"]
		],
		"info" : [
			"_.is* 检测变量类型是否与指定类型匹配，返回布尔值"
		],
		"infowarning":[
			"非必要时,使用用_.is*效率远高于 _.typeof"
		],
		"table":[
		],
		"example":[
			{ 
				"info":"使用isFunction来检测出变量的类型",
				"code":[
					"console.log(_.isFunction([]))"
				],
				"result":[
					"false"
				]
			}
		],
		"exampledemo":[
		]
	},

	"_.NULL" : {
		"toptitle" : ["_.NULL"],
		"api" : [
			"_.NULL(?)"
		],
		"param" : [
			["?","任意类型,没有意义"]
		],
		"paramcall" : [
		],
		"returnval" : [
		],
		"info" : [
			"_.NULL为一个空函数，一个无用的指针"
		],
		"infowarning":[
			"可以将无用函数,空函数都指向_.NULL,作用和jQuery.noop等同,从而减少创建无用匿名函数的次数,编译器也不会GC"
		],
		"table":[],
		"example":[
		],
		"exampledemo":[
		]
	},

	"_.root" : {
		"toptitle" : ["_.root"],
		"api" : [
			"_.root"
		],
		"param" : [
		],
		"paramcall" : [
		],
		"returnval" : [
			["Window Object","[ 浏览器宿主环境下指向window ]"]
		],
		"info" : [
			"_.root 在浏览器环境下指向window对象,具体数值视宿主环境而定"
		],
		"infowarning":[
		],
		"table":[],
		"example":[
		],
		"exampledemo":[
		]
	},

	"_.broken" : {
		"toptitle" : ["_.broken"],
		"api" : [
			"_.broken"
		],
		"param" : [
		],
		"paramcall" : [
		],
		"returnval" : [
			["{}","[ 空对象 ]"]
		],
		"info" : [
			"_.broken　是一个对象指针，指向一个空的对象，此对象不会被GC,用于空指向和比较"
		],
		"infowarning":[
		],
		"table":[],
		"example":[
		],
		"exampledemo":[
		]
	},

	"_.loop" : {
		"toptitle" : ["_.loop","_.foreach"],
		"api" : [
			"_.loop(list,callback(val,index,list),context)",
			"_.foreach(list,callback(val,index,list),context)"
		],
		"param" : [
			["list","[ 类型:Array,Object ]"],
			["callback","[ 类型:Function ]"],
			["context","[ 类型:任意类型 ]"]
		],
		"paramcall" : [
			["val","[ list 每次遍历返回的值 ]"],
			["index","[ list 每次遍历返回的key或者index ]"],
			["list","[ 指向list本身 ]"]
		],
		"returnval" : [
			["list",""]
		],
		"info" : [
			"_.loop同_.foreach，用于对象或者数组的循环"
		],
		"infowarning":[],
		"table":[],
		"example":[
			{ 
				"info":"使用循环",
				"code":[
				"var num = 0;",
				"var list = [1,2,3,4];",
				"_.loop(list,function(val){",
  			"  num+=val;",
				"});",
				"console.log(num)",
				"",
				"var obj = { a:1,b:3,c:3 };",
				"_.loop(obj,function(val){",
				"  num+=val;",
				"});",
				"console.log(num)"
				],
				"result":[
					"10",
					"16"
				]
			},
			{ 
				"info":"叠加 index 或者 key",
				"code":[
				"var str = 'call - ';",
				"",
				"var obj = { a:1,b:2,c:3 };",
				"_.loop(obj,function(val,key){",
				"  str+= key + ' '",
				"});",
				"",
				"console.log(str)"
				],
				"result":[
					"call - a b c"
				]
			},
			{ 
				"info":"改变回调的this指向",
				"code":[
				"var obj = { a:1,b:2,c:3 };",
				"_.loop(obj,function(val,key){ ",
				" console.log(key+this);",
				"},' is sb');"
				],
				"result":[
				"a is sb",
				"b is sb",
				"c is sb"
				]
			}
		],
		"exampledemo":[
		]
	},

	"_.keys" : {
		"toptitle" : ["_.keys"],
		"api" : [
			"_.keys(varible)"
		],
		"param" : [
			["varible","[ 类型:非null类型 ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
			["[key,key1,...]","[ 包含参数对象或者数组中所有的key或index的数组 ]"]
		],
		"info" : [
			"_.keys 整合出对象和键，或者数组的下标(index)，作为数组返回"
		],
		"infowarning":[
			"当对象中有属性的enumerable被设置为false时(非枚举属性),则该属性不会在返回数组中"
		],
		"table":[],
		"example":[
			{ 
				"info":"整合出对象的键 ",
				"code":[
				"console.log(_.keys({ a:1,b:2 }))"
				],
				"result":[
					"['a','b']"
				]
			},
			{ 
				"info":"整合出数组的下标 ",
				"code":[
				"console.log(_.keys([5,5,5,5,5]))"
				],
				"result":[
					"[0,1,2,3,4]"
				]
			},
			{ 
				"info":"非枚举属性不会被返回 ",
				"code":[
				"var o = { a:1,c:2 }",
				"_.define(o,'b',{",
				"  value:'?',",
				"  enumerable:false",
				"});",
				"",
				"//属性已经存在但不会被枚举",
				"console.log(o.b);",
				"console.log(_.keys(o));"
				],
				"result":[
				"?",
				"['a','c']"
				]
			}
		],
		"exampledemo":[
		]
	},

	"_.slice" : {
		"toptitle" : ["_.slice"],
		"api" : [
			"_.slice(varible)"
		],
		"param" : [
			["varible","[ 类型:任意类型 ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
			["[val,val1,...]","[ 被复制的数组，或者空数组 ]"]
		],
		"info" : [
			"_.slice 通常用于拷贝数组,或者将非真实数组伪数组类型转化成真实的数组(如NodeList对象,Arguments对象)",
			"如果参数不是一个数组或者不是一个类数组,则返回值均为一个空的数组"
		],
		"infowarning":[],
		"table":[],
		"example":[
			{ 
				"info":"拷贝数组的必要性",
				"code":[
				"var a = [1,2,3];",
				"var b = a;",
				"b[0] = 8;",
				"//此时a数组的值已经发生了改变",
				"console.log(a[0])",
				"console.log(b[0])",
				"",
				"var c = [1,2,3];",
				"var d = _.slice(c);",
				"d[0] = 9;",
				"//被复制的数组则不会修改原数组的值",
				"console.log(c[0])",
				"console.log(d[0])"
				],
				"result":[
					"8",
					"8",
					"1",
					"9"
				]
			},
			{ 
				"info":"参数无意义",
				"code":[
				"console.log(_.slice({}))",
				"console.log(_.slice(''))",
				"console.log(_.slice(321))",
				"console.log(_.slice(null))",
				"console.log(_.slice())"
				],
				"result":[
					"[]",
					"[]",
					"[]",
					"[]",
					"[]"
				]
			}
		],
		"exampledemo":[
		]
	},

	"_.splice" : {
		"toptitle" : ["_.splice"],
		"api" : [
			"_.splice(list,index_key,offset)"
		],
		"param" : [
			["list","[ 类型:Array,Object ]"],
			["index_key","[ 类型:Number,String ]"],
			["offset","[ 类型:Number ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
			["list","[ 返回参数list本身 ]"]
		],
		"info" : [
			"_.splice用于剔除掉数组中元素,或者删除掉对象中某个键值对",
			"此操作直接作用参数list,执行之后list被修改"
		],
		"infowarning":[
		],
		"table":[],
		"example":[
			{ 
				"info":"删除数组中的元素，或者对象中的键值对",
				"code":[
				"var a = [1,2,3];",
				"_.splice(a,0);",
				"console.log(a)",
				"",
				"var b = [3,2,'?',2];",
				"_.splice(b,0,2);",
				"console.log(b)",
				"",
				"var o = { a:1,b:2 };",
				"_.splice(o,'a');",
				"console.log(o)"
				],
				"result":[
				"[2,3]",
				"['?',2]",
				"{b:2}"
				]
			}
		],
		"exampledemo":[
		]
	},

	"_.pop" : {
		"toptitle" : ["_.pop"],
		"api" : [
			"_.pop(arr)"
		],
		"param" : [
			["arr","[ 类型:Array ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
			["arr 或 pop-elm","[ 返回被弹出的元素，或者是参数arr本身 ]"]
		],
		"info" : [
			"_.pop用于将数组末尾的元素弹出,执行成功后直接导致原数组被修改",
			"如果参数不是数组(非法)，则返回此参数"
		],
		"infowarning":[
			"可用于模拟堆栈"
		],
		"table":[],
		"example":[
			{ 
				"info":"弹出数组末尾的元素",
				"code":[
				"var a = [1,2,3,4];",
				"console.log(_.pop(a))",
				"//原数组已经被修改",
				"console.log(a)"
				],
				"result":[
				"4",
				"[1,2,3]"
				]
			}
		],
		"exampledemo":[
		]
	},

	"_.shift" : {
		"toptitle" : ["_.shift"],
		"api" : [
			"_.shift(arr)"
		],
		"param" : [
			["arr","[ 类型:Array ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
			["arr 或 shift-elm","[ 返回被弹出的元素，或者是参数arr本身 ]"]
		],
		"info" : [
		"_.shift用于将数组的第一个元素弹出,执行成功后直接导致原数组被修改",
		"如果参数不是数组(非法)，则返回此参数"
		],
		"infowarning":[
			"可用于模拟队列"
		],
		"table":[],
		"example":[
			{ 
				"info":"弹出数组首个元素",
				"code":[
				"var a = [1,2,3,4];",
				"console.log(_.shift(a))",
				"//原数组已经被修改",
				"console.log(a)"
				],
				"result":[
					"1",
					"[2,3,4]"
				]
			}
		],
		"exampledemo":[
		]
	},

	"_.push" : {
		"toptitle" : ["_.push"],
		"api" : [
			"_.push(arr,val1,val2,...)"
		],
		"param" : [
			["arr","[ 类型:Array ]"],
			["val","[ 类型:任意类型 ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
			["arr","[ 参数arr本身 ]"]
		],
		"info" : [
			"_.push用于将数组末尾添加新的元素,执行成功后直接导致原数组被修改",
			"如果参数不是数组(非法)，则返回此参数"
		],
		"infowarning":[],
		"table":[],
		"example":[
			{ 
				"info":"数组末尾新增元素",
				"code":[
				"console.log(_.push([1,2,3,4],1,2,3))"
				],
				"result":[
					"[1,2,3,4,1,2,3]"
				]
			}
		],
		"exampledemo":[
		]
	},

	"_.unshift" : {
		"toptitle" : ["_.unshift"],
		"api" : [
			"_.unshift(arr,val1,val2,...)"
		],
		"param" : [
			["arr","[ 类型:Array ]"],
			["val","[ 类型:任意类型 ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
			["arr","[ 参数arr本身 ]"]
		],
		"info" : [
			"_.unshift用于将数组起始位置添加新的元素,执行成功后直接导致原数组被修改",
			"如果参数不是数组(非法)，则返回此参数"
		],
		"infowarning":[],
		"table":[],
		"example":[
			{ 
				"info":"数组起始位置新增元素",
				"code":[
				"console.log(_.unshift([1,2,3,4],1,2,3))"
				],
				"result":[
					"[1,2,3,1,2,3,4]"
				]
			}
		],
		"exampledemo":[
		]
	},

	"_.clone" : {
		"toptitle" : ["_.clone"],
		"api" : [
			"_.clone(varible)"
		],
		"param" : [
			["varible","[ 类型:Array,Object,Number,String ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
			["clone Object","[ 克隆对象 ]"]
		],
		"info" : [
			"_.clone用于浅拷贝数组或者对象,内置使用了原生JSONAPI,",
			"深拷贝可以查看 _.clonedoom"
		],
		"infowarning":[
			"浅拷贝对象 拷贝会自动将Function类型的变量给省略掉"
		],
		"table":[],
		"example":[
			{ 
				"info":"拷贝对象,数组",
				"code":[
				"var fn = function(){};",
				"var a = {a:1,b:2,c:fn};",
				"var b = _.clone(a);",
				"var c = [3,2,1]",
				"var d = _.clone(c);",
				"",
				"console.log(b===a);",
				"//浅拷贝自动省略了Function类型的数值",
				"console.log(b.c);",
				"console.log(b);",
				"console.log(c===d);",
				"console.log(d);"
				],
				"result":[
				"&gt;  false",
				"&gt;  undefined",
				"&gt;  {a:1,b:2}",
				"&gt;  false",
				"&gt;  [3,2,1]"
				]
			}
		],
		"exampledemo":[
		]
	},

	"_.clonedoom" : {
		"toptitle" : ["_.clonedoom"],
		"api" : [
			"_.clonedoom(varible)"
		],
		"param" : [
			["varible","[ 类型:Array,Object,Number,String ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
			["clone Object","[ 克隆对象 ]"]
		],
		"info" : [
			"_.clonedoom用于深度拷贝数组或者对象,",
			"deeping clone 由于递归性能上不如浅拷贝，拷贝出来的对象实例内所有内容完全不等于原对象(function除外)",
			"快速数据浅拷贝可以查看 _.clone"
		],
		"infowarning":[
		],
		"table":[],
		"example":[
			{ 
				"info":"深度拷贝对象,数组",
				"code":[
				"var fn = function(){};",
				"var a = {a:1,b:2,c:fn,d:{ s:1,b:2 }};",
				"var b = _.clonedoom(a);",
				"",
				"console.log(b);",
				"console.log(b===a);",
				"console.log(typeof b.c === 'function')",
				"console.log(b.c===fn);",
				"console.log(a.d===b.d);"
				],
				"result":[
				"&gt;  {a: 1, b: 2, c: fn, d: { s:1,b:2 }};",
				"&gt;  false",
				"&gt;  true",
				"&gt;  true",
				"&gt;  false"
				]
			}
		],
		"exampledemo":[
		]
	},

	"_.sort" : {
		"toptitle" : ["_.sort"],
		"api" : [
			"_.sort(arr,func)"
		],
		"param" : [
			["arr","[ 类型:Array ]"],
			["func","[ 类型:Function ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
			["arr","[ 返回被排序过的arr，或者是参数arr本身 ]"]
		],
		"info" : [
			"_.sort方法对数组进行排序，func参数是可选的，不传入的话则会导致js使用其默认的排序规则",
			"方法执行成功后会立马修改arr原数组",
			"当arr参数非法时，则会返回arr本身"
		],
		"infowarning":[],
		"table":[],
		"example":[
			{ 
				"info":"对数值进行由小到大排序",
				"code":[
				"var a = [31,12,1,2,23,4,15,66,3,9,84,200,8,68]",
				"_.sort(a,function(n,m){ return n-m; })",
				"",
				"console.log(a)"
				],
				"result":[
					"[1,2,3,4,8,9,12,15,23,31,66,68,84,200]"
				]
			}
		
		],
		"exampledemo":[
		]
	},

	"_.unique" : {
		"toptitle" : ["_.unique"],
		"api" : [
			"_.unique(arr)"
		],
		"param" : [
			["arr","[ 类型:Array ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
			["arr","[ 返回被去重的arr，或者是参数arr本身 ]"]
		],
		"info" : [
			"_.unique 去重算法，将数组中的重复值剔除掉，不受到类型的影响",
			"方法执行成功后会立马修改arr原数组"
		],
		"infowarning":[],
		"table":[],
		"example":[
			{ 
				"info":"去除数组中重复的元素",
				"code":[
				"var ao = { x:'?' };",
				"var fn = function(){};",
				"var a = [5,1,2,10,ao,4,fn,'10',4,fn,'1',6,8,4,ao,'21',1,3,fn,2,10,3,8,9,21,ao,8,fn,7,'2',4,'1']",
				"_.unique(a);",
				"console.log(a)"
				],
				"result":[
					"[5, 1, 2, 10, ao, 4, fn, '10', '1', 6, 8, '21', 3, 9, 21, 7, '2']"
				]
			}
		
		],
		"exampledemo":[
		]
	},

	"_.filter" : {
		"toptitle" : ["_.filter","_.find"],
		"api" : [
			"_.filter(list,idf(val,index,list))",
			"_.find(list,idf(val,index,list))"
		],
		"param" : [
			["list","[ 类型:Array,Object ]"],
			["idf","[ 类型:Function ]"]
		],
		"paramcall" : [
			["val","[ list 每次遍历返回的值 ]"],
			["index","[ list 每次遍历返回的key或者index ]"],
			["list","[ 指向list本身 ]"]
		],
		"returnval" : [
			["filter array","[ 无论参数list是对象，还是数组，返回结果都是一个包含了过滤条件过滤的数值集合数组 ]"]
		],
		"info" : [
			"_.filter 等同于 _.find, 用于对象或者数组的筛选,满足筛选条件的结果作为返回",
			"与 _.reject 完全相反"
		],
		"infowarning":[],
		"table":[],
		"example":[
			{ 
				"info":"使用筛选函数",
				"code":[
				"var list = [1,2,3,4,5,6];",
				"//筛选出是偶数的值",
				"var evenlist = _.filter(list,function(val){",
				"  return val%2===0; ",
				"});",
				"",
				"console.log(evenlist)",
				"",
				"var obj = { a:1,b:2,c:3,d:4,e:5,f:6 };",
				"//筛选出是奇数的值",
				"var oddlist = _.find(obj,function(val){",
				"  return val%2;",
				"});",
				"",
				"console.log(oddlist)"
				],
				"result":[
					"[2,4,6]",
					"[1,3,5]"
				]
			}
		
		],
		"exampledemo":[
		]
	},

	"_.reject" : {
		"toptitle" : ["_.reject"],
		"api" : [
			"_.reject(list,idf(val,index,list))"
		],
		"param" : [
			["list","[ 类型:Array,Object ]"],
			["idf","[ 类型:Function ]"]
		],
		"paramcall" : [
			["val","[ list 每次遍历返回的值 ]"],
			["index","[ list 每次遍历返回的key或者index ]"],
			["list","[ 指向list本身 ]"]
		],
		"returnval" : [
			["reject array","[ 无论参数list是对象，还是数组，返回结果都是一个包含了不满足过滤条的数值集合数组 ]"]
		],
		"info" : [
			"用于对象或者数组的筛选,不满足筛选条件的结果作为返回",
			"与 _.filter 完全相反"
		],
		"infowarning":[],
		"table":[],
		"example":[
			{ 
				"info":"使用筛选函数",
				"code":[
				"var list = [1,2,3,4,5,6];",
				"var oddlist = _.reject(list,function(val){",
				"  return val%2===0; ",
				"});",
				"",
				"console.log(oddlist)",
				"",
				"var obj = { a:1,b:2,c:3,d:4,e:5,f:6 };",
				"//筛选条件,如果是奇数则满足，所以奇数的值需要被过滤掉,偶数才是返回结果",
				"var evenlist = _.reject(obj,function(val){",
				"  return val%2;",
				"});",
				"",
				"console.log(evenlist)"
				],
				"result":[
					"[1,3,5]",
 					"[2,4,6]"
				]
			}
		
		],
		"exampledemo":[
		]
	},

	"_.map" : {
		"toptitle" : ["_.map"],
		"api" : [
			"_.map(list,callback(val,index,list))"
		],
		"param" : [
			["list","[ 类型:Array,Object ]"],
			["callback","[ 类型:Function ]"]
		],
		"paramcall" : [
			["val","[ list 每次遍历返回的值 ]"],
			["index","[ list 每次遍历返回的key或者index ]"],
			["list","[ 指向list本身 ]"]
		],
		"returnval" : [
			["list","参数list"]
		],
		"info" : [
			"_.map使用映射的方式修改了原数组或者对象的数值",
			"执行成功则会立马修改原来的数组或对象"
		],
		"infowarning":[],
		"table":[],
		"example":[
			{ 
				"info":"数组和对象的映射修改 ",
				"code":[
				"var a = [0,1,2,3,4];",
				"var o = { a:1,b:2,c:3 };",
				"",
				"_.map(a,function(val){",
				"  return val+1;",
				"});",
				"",
				"_.map(o,function(val){",
				"  return val*2;",
				"});",
				"",
				"console.log(a)",
				"console.log(o)"
				],
				"result":[
					"[1,2,3,4,5]",
					"{a:2,b:4,c:6}"
				]
			}
		
		],
		"exampledemo":[
		]
	},

	"_.cat" : {
		"toptitle" : ["_.cat"],
		"api" : [
			"_.cat(list,callback(val,index,list))"
		],
		"param" : [
			["list","[ 类型:Array,Object ]"],
			["callback","[ 类型:Function ]"]
		],
		"paramcall" : [
			["val","[ list 每次遍历返回的值 ]"],
			["index","[ list 每次遍历返回的key或者index ]"],
			["list","[ 指向list本身 ]"]
		],
		"returnval" : [
			["cat list","[ 被裁剪的数值,作为数组返回 ]"]
		],
		"info" : [
			"_.cat本质上和_.splice大同小异,都是删除掉数组和对象中的元素",
			"而_.cat提供一个筛选函数，满足条件的值将会从数组或对象中被剔除，并且转移到返回结果中",
			"执行成功则会立马修改原来的数组或对象"
		],
		"infowarning":[],
		"table":[],
		"example":[
			{ 
				"info":"裁剪掉数组中的偶数，裁剪掉对象中的奇数",
				"code":[
				"var a = [1,2,3,4,5,6];",
				"var o = { a:1,b:2,c:3,d:4,e:5,f:6 };",
				"",
				"var as = _.cat(a,function(val){",
				"  return val%2===0;",
				"});",
				"",
				"var os = _.cat(o,function(val){",
				"  return val%2;",
				"});",
				"",
				"console.log(a)",
				"//被裁剪出来的部分",
				"console.log(as)",
				"",
				"console.log(o)",
				"//被裁剪出来的部分",
				"console.log(os)"
				],
				"result":[
				"&gt;  [1,3,5]",
				"&gt;  [2,4,6]",
				"&gt;  {b:2,d:4,f:6}",
				"&gt;  [{a:1},{c:3},{e:5}]"
				]
			}
		
		],
		"exampledemo":[
		]
	},


	"_.hook" : {
		"toptitle" : ["_.hook"],
		"api" : [
			"_.hook(list,callback(args,...),args,args1,...)"
		],
		"param" : [
			["list","[ 类型:Array,Object ]"],
			["callback","[ 类型:Function,String ]"],
			["args","[ 类型:任意类型 ]"]
		],
		"paramcall" : [
			["args","[ 指向 _.hook 第三参数之后所有的参数会被传递到这个回调中供使用 ]"]
		],
		"returnval" : [
			["hook list","[ 修改之后的list值 ]"]
		],
		"info" : [
			"_.hook提供了一种高级的映射方式，构建于 _.map 之上的一层封装，使用映射的方式修改了原数组或者对象的数值",
			"执行成功则会立马修改原来的数组或对象"
		],
		"infowarning":[],
		"table":[],
		"example":[
			{ 
				"info":"数组和对象的映射修改",
				"code":[
				"var a = ['cloud','is','your','god','!'];",
				"var o = {",
				"  a:[1],",
				"  b:[1,2],",
				"  c:[1,2,3],",
				"  d:[1,2,3,4],",
				"  e:[1,2,3,4,5]",
				"}",
				"",
				"_.hook(a,function(sharp,at){",
				"  return this+sharp+at;",
				"},'#','@');",
				"",
				"_.hook(o,'toString');",
				"",
				"console.log(a)",
				"console.log(o)"
				],
				"result":[
					"&gt;  ['cloud#@', 'is#@', 'your#@', 'god#@', '!#@']",
					"&gt;  {a: '1', b: '1,2', c: '1,2,3', d: '1,2,3,4', e: '1,2,3,4,5'}"
				]
			}
		
		],
		"exampledemo":[
		]
	},

	"aix.model" : {
		"toptitle" : ["aix.model"],
		"api" : [
			"aix.model(setting)"
		],
		"param" : [
			["setting","[ 类型:Object,Null ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
			["aix model","实例化的aix.model数据模型"]
		],
		"info" : [
			"aix.model 是 aix 框架中模型的基础构造函数",
			"使用new 关键字可以创建一个新的aix.model数据模型",
			"aix.model模型作为一个数据容器,可以很好的将数据管理起来",
			"并且提供不同的Events和API,方便数据处理"
		],
		"infowarning":[
			"构造函数 aix.model"
		],
		"table":[],
		"example":[
			{ 
				"info":"创建一个模型",
				"code":[
				"var model = new aix.model({",
				"  data:[1,2,3]",
				"});",
				"",
				"console.log(model);",
				"console.log(model.parse());"
				],
				"result":[
					"aix.model( data : [1,2,3] , change : false ...)",
					"[1,2,3]"
				]
			}
		
		],
		"exampledemo":[
		]
	},

	"aix.model.parse" : {
		"toptitle" : ["aix.model - [ parse ]"],
		"api" : [
			"model.parse()"
		],
		"param" : [
			["无",""]
		],
		"paramcall" : [
		],
		"returnval" : [
			["model data"," 模型数据"]
		],
		"info" : [
			"实例化的model可以调用parse方法来安全返回模型中的数据"
		],
		"infowarning":[
			"虽然,直接访问model.data可以获取到模型的数据,但是我们不推荐这样的做法",
			"由于Js中的对象是指针,我们尽量使用parse()方法来返回模型的安全数据,防止外部逻辑轻易的修改了模型的数据(model.data)"
		],
		"table":[],
		"example":[
			{ 
				"info":"获取模型中的数据",
				"code":[
				"var m = new aix.model({",
				"  data : {",
				"   a : 1,",
				"   b : 2",
				"  }",
				"});",
				"",
				"console.log(m.parse())"
				],
				"result":[
					"{a:1,b:2}"
				]
			}
		
		],
		"exampledemo":[
		]
	},

	"aix.model.get" : {
		"toptitle" : ["aix.model - [ get ]"],
		"api" : [
			"model.get(arg)"
		],
		"param" : [
			["arg","[ 类型:String,Number,Null ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
			["value 或者 model.data","[ 返回模型数据中某个值, 也可能返回整个模型 ]"]
		],
		"info" : [
			"模型的get方法主要用途是用来获取单个数据"
		],
		"infowarning":[
			"当属性不存在时,则会返回一个空的字符串",
			"适用于模型数据为对象或者数组"
		],
		"table":[],
		"example":[
			{ 
				"info":"获取模型数据的一条数据",
				"code":[
				"var m = new aix.model({",
				"  data:{",
				"    s:1,",
				"    b:2",
				"  }",
				"})",
				"",
				"console.log(m.get('b'))",
				"//不存在的属性",
				"console.log(m.get('c'))"
				],
				"result":[
					"2",
					"''"
				]
			}
		
		],
		"exampledemo":[
		]
	},

	"aix.model.set" : {
		"toptitle" : ["aix.model - [ set ]"],
		"api" : [
			"model.set(data)",
			"model.set(key,value)"
		],
		"param" : [
			["data","[ 类型:任意类型 ]"],
			["key","[ 类型:String,Number ]"],
			["value","[ 类型:任意类型 ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
			["model","this模型自身"]
		],
		"info" : [
			"修改模型的data数据,或者修改模型数据中的某条数据",
			"如果模型设置了validate函数,则会对设置的数据进行校验,触发相应的事件, 详情查看 aix.model - validate"
		],
		"infowarning":[
			"设置数据最好使用set方法,只要data数据被改变(通过验证).则会触发change事件,详情查看 aix.model - events"
		],
		"table":[],
		"example":[
			{ 
				"info":"设置模型数据",
				"code":[
				"var m = new aix.model({",
				"  data : {",
				"    a:1,",
				"    b:2",
				"  }",
				"});",
				"",
				"m.set('b',4);",
				"console.log(m.get('b'));",
				"",
				"m.set({ a:2,c:6 });",
				"console.log(m.get('b'));",
				"console.log(m.parse());"
				],
				"result":[
					"4",
					"''",
					"{ a:2,c:6 }"
				]
			}
		
		],
		"exampledemo":[
		]
	},

	"aix.model.events" : {
		"toptitle" : ["aix.model - [ events ]"],
		"api" : [
			"model.addEvent(type,func)",
			"model.removeEvent(type,func)",
			"model.dispatch(type,func,args)",
			"model.trigger(type,func,args)"
		],
		"param" : [
			["type","[ 类型:String ]"],
			["func","[ 类型:Function,Null ]"],
			["args","[ 类型:Array,Null ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
			["model","this模型"]
		],
		"info" : [
			"aix.model作为一个数据容器,它提供一些基础的事件api,用于给模型绑定事件,移除事件,已经触发事件",
			"事件的触发都基于dispatch api, 模型在一些特定的行为下会触发特定的事件"
		],
		"infowarning":[
			"事件是模型的重要api,利用事件分发机制可以做到1对n的数据进行双向绑定",
			"事件函数中的this一般都是指向模型本身的,所以可以直接调用this[api]来对模型本身进行操作",
			"_",
			"* trigger 和 dispatch的作用等同.",
			"* change事件是一个比较特殊的事件,它的触发时机并不是在模型数据改变后才触发的,而是模型数据通过了验证,即将要改变之前触发的,所以change事件的两个参数 change(newvalue,oldvalue). 分别传入了修改后的数值(newvalue),以及未修改时候的原数值(oldvalue)"
		],
		"table" : [
			["API","触发事件"],
			["init","init(初始化事件,一般只在模型创建的时候被调用)"],
			["set","change,set"],
			["add","change,add"],
			["remove","change,remove"],
			["aget","get,get:success,get:fail"],
			["fetch","fetch,change,fetch:success,fetch:fail"],
			["sync","fetch,change,fetch:success,fetch:fail"],
			["post","post,change,post:success,post:fail"],
			["save","post,change,post:success,post:fail"],
			["pipe(type)","type,type:success,type:fail"],
			["validate","validate,validate:success,validate:fail,change"]
		],
		"example":[
			{ 
				"info":"常规的定义事件方法",
				"code":[
				"var m = new aix.model({",
				"  data:{",
				"    a : 1,",
				"    b : 2",
				"  },",
				"  events:{",
				"    init:function(){",
				"      console.log(this.data.a+this.data.b)",
				"    },",
				"    custom:function(){",
				"      this.set({a:4,b:6});",
				"    },",
				"    change:function(newModeldata,oldModeldata){",
				"     console.log(newModeldata.a*newModeldata.b)",
				"    }",
				"  }",
				"})",
				"",
				"//custom事件中修改了模型的数值,所以会触发change事件",
				"m.dispatch('custom');",
				"",
				"//查看模型当前的数据",
				"console.log(m.parse())"
				],
				"result":[
					"3",
					"24",
					"{a:4,b:6}"
				]
			},
			{ 
				"info":"使用addEvent添加事件,触发事件",
				"code":[
				"var m = new aix.model({",
				"  data: 'cloud',",
				"  events:{",
				"    init:function(){",
				"      console.log('model create!');",
				"    }",
				"  }",
				"});",
				"",
				"m.addEvent('hello',function(){",
				"  console.log('hello '+this.parse())",
				"});",
				"",
				"//可以为同一个事件添加多个触发函数,按添加先后顺序执行",
				"m.addEvent('hello',function(){",
				"  console.log('Lucky day today!')",
				"});",
				"",
				"m.dispatch('hello');"
				],
				"result":[
					"model create!",
					"hello cloud",
					"Lucky day today!"
				]
			},
			{ 
				"info":"使用removeEvent移除事件",
				"code":[
				"var fn = function(){ ",
				"  console.log('fn函数')",
				"}",
				"",
				"var m = new aix.model({",
				"  events:{",
				"    log:fn",
				"  }",
				"});",
				"",
				"m.addEvent('log',function(){",
				"  console.log('匿名函数')",
				"});",
				"",
				"m.addEvent('log',function(){",
				"  console.log('匿名函数2')",
				"});",
				"",
				"m.dispatch('log');",
				"",
				"//只移除了某个指定的函数 fn",
				"m.removeEvent('log',fn)",
				"m.dispatch('log')",
				"",
				"//直接移除了log上的所有事件",
				"m.removeEvent('log')",
				"m.dispatch('log')  //无效触发"
				],
				"result":[
					"fn函数",
					"匿名函数",
					"匿名函数2",
					"",
					"匿名函数",
					"匿名函数2"
				]
			},
			{ 
				"info":"触发事件时携带参数",
				"code":[
				"var m = new aix.model({",
				"  data:213,",
				"  events:{",
				"    log:function(number){",
				"      console.log(this.parse()+(number||0))",
				"    }",
				"  }",
				"});",
				"",
				"m.dispatch('log');",
				"",
				"// 可以携带自定义参数,作为事件函数的参数来使用",
				"m.dispatch('log',null,[87]);"
				],
				"result":[
					"213",
					"300"
				]
			}
		
		],
		"exampledemo":[
		]
	},

	"aix.model.listen" : {
		"toptitle" : ["aix.model - [ listen ]"],
		"api" : [
			"model.listen(prop,handle(new,old))",
			"model.unlisten(prop)"
		],
		"param" : [
			["prop","[ 类型:String ]"],
			["handle","[ 类型:Function ]"]
		],
		"paramcall" : [
			["new","[ prop属性发生改变时,会将改变的值传入handle ]"],
			["old","[ prop属性发生改变时,会将prop原值传入handle ]"],
			["return new","[ handle最终需要将new值返回,否则无法设置属性值 ]"]
		],
		"returnval" : [
			["model","this模型"]
		],
		"info" : [
			"listen 方法用于监听模型数据中,某个属性的变化",
			"unlisten 用于解除监听绑定"
		],
		"infowarning":[
			"使用listen,unlisten要求模型的数据为一个对象,否则不能监听",
			"如果model.data被替换成了一个新的值,则之前绑定的监听事件无效"
		],
		"table":[],
		"example":[
			{ 
				"info":"监听模型数据中某个值的改变. 然后解除监听",
				"code":[
				"var m = new aix.model({",
				"  data:{",
				"    a:1,",
				"    b:2",
				"  },",
				"  events:{",
				"    change:function(){",
				"      console.log('model has change!')",
				"    }",
				"  }",
				"});",
				"",
				"m.listen('a',function(newval,old){",
				"  console.log(newval,old); ",
				"  return newval; ",
				"})",
				"",
				"m.set('a',3)",
				"console.log(m.parse())",
				"",
				"",
				"m.unlisten('a')",
				"//不再触发监听事件",
				"m.set('a',10)"
				],
				"result":[
					"model has change!",
					"3,1",
					"{a:3,b:2}",
					"",
					"model has change!"
				]
			}
		
		],
		"exampledemo":[
		]
	},

	"aix.model.toJSON" : {
		"toptitle" : ["aix.model - [ toJSON ]"],
		"api" : [
			"model.toJSON()"
		],
		"param" : [
			["无",""]
		],
		"paramcall" : [
		],
		"returnval" : [
			["serilaize data","被JSON序列化的字符串数据"]
		],
		"info" : [
			"将模型内的数据,转化为标准的JSON字符串"
		],
		"infowarning":[
		],
		"table":[],
		"example":[
			{ 
				"info":"将模型数据JSON序列化",
				"code":[
				"var m = new aix.model({",
				"  data:{",
				"    a:1,",
				"    b:2,",
				"    c:{",
				"      c1:3,",
				"      c2:4,",
				"      c3:5",
				"    }",
				"  }",
				"});",
				"",
				"console.log(m.toJSON())"
				],
				"result":[
					"{'a':1,'b':2,'c':{'c1':3,'c2':4,'c3':5}}"
				]
			}
		
		],
		"exampledemo":[
		]
	},

	"aix.model.add" : {
		"toptitle" : ["aix.model - [ add ]"],
		"api" : [
			"model.add(arg,arg1,...)"
		],
		"param" : [
			["arg","[类型:任意类型]"]
		],
		"paramcall" : [
		],
		"returnval" : [
			["model","this模型"]
		],
		"info" : [
			"aix.model.add 是一个比较特殊的操作,他会改变模型原来的数值,同时触发校验,和set不同的是他在原有的数据上做了'叠加'操作"
		],
		"infowarning":[
			"使用add之前最好明白模型里存储数据的类型"
		],
		"table":[],
		"example":[
			{ 
				"info":"扩充模型数据的数组",
				"code":[
				"var m = new aix.model({",
				"  data:[1,2]",
				"});",
				"",
				"m.add([3,4],[5,6,7],[8,9]);",
				"console.log(m.parse())"
				],
				"result":[
					"[1,2,3,4,5,6,7,8,9]"
				]
			}
		
		],
		"exampledemo":[
		]
	},

	"aix.model.remove" : {
		"toptitle" : ["aix.model - [ remove ]"],
		"api" : [
			"model.remove(arg,arg1,...)"
		],
		"param" : [
			["arg","任意类型"]
		],
		"paramcall" : [
		],
		"returnval" : [
			["model","this模型"]
		],
		"info" : [
			"remove 用于移除掉原数据中特定的数据"
		],
		"infowarning":[
			"参数为空传入时,则会默认将模型数据变成null"
		],
		"table":[],
		"example":[
			{ 
				"info":"移除模型数据中的特定值",
				"code":[
				"var m = new aix.model({",
				"  data:[1,2,3,4,5]",
				"});",
				"",
				"m.remove(2)",
				"console.log(m.parse());",
				"",
				"",
				"//没有参数则完全移除模型数据",
				"m.remove()",
				"console.log(m.parse());"
				],
				"result":[
					"[1,3,4,5]",
					"null"
				]
			}
		
		],
		"exampledemo":[
		]
	},

	"aix.model.validate" : {
		"toptitle" : ["aix.model - [ remove ]"],
		"api" : [
			"model.validate(data)"
		],
		"param" : [
			["无",""]
		],
		"paramcall" : [
			["data","[ 每次模型发生修改时,传入的修改值 ]"]
		],
		"returnval" : [
			["vali boolean","[ 需要在Validate校验函数内部返回布尔值来判断是否通过了校验 ]"]
		],
		"info" : [
			"validate最好是在模型初始化的时候预先定义好,是一个校验函数,来校验模型数据的合法性"
		],
		"infowarning":[
			"validate为Function类型,否则无效"
		],
		"table":[],
		"example":[
			{ 
				"info":"定义校验函数",
				"code":[
				"var m = new aix.model({",
				"  //模型数据只能为数组",
				"  validate:function(data){",
				"    return _.typeof(data) === 'array';",
				"  },",
				"  events:{",
				"    'validate:success':function(data){",
				"       console.log('model data has been success set to array -> ['+data.toString()+']')",
				"    },",
				"    'validate:fail':function(data){",
				"       console.log('model data set fail with '+_.typeof(data))",
				"    }",
				"  }",
				"});",
				"",
				"m.set([3,2,1]);",
				"console.log(m.parse())",
				"",
				"m.set('this String');",
				"console.log(m.parse())",
				""
				],
				"result":[
				"model data has been success set to array -> [3,2,1]",
				"[3, 2, 1]",
				"",
				"model data set fail with string",
				"[3, 2, 1]"
				]
			}
		
		],
		"exampledemo":[
		]
	},

	"aix.model.extend" : {
		"toptitle" : ["aix.model - [ extend ]"],
		"api" : [
			"aix.model.extend(setting)"
		],
		"param" : [
			["setting","[ 类型: Object,Null ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
			["extend model constructor","[ 从aix.model中扩展出的自定义模型构造器 ]"]
		],
		"info" : [
			"aix.model.extend 用于生成自定义的模型构造函数, 以下实例详细的展示了这一点",
			"通常生成模型我们使用 new aix.model() , 立即产生了一个实例化模型",
			"而new aix.model.extend()则是返回了一个模型构造器"
		],
		"infowarning":[
			"模型构造器的base属性指向了aix.model"
		],
		"table":[],
		"example":[
			{ 
				"info":"创建一个模型构造器",
				"code":[
				"var mc = new aix.model.extend({",
				"  data:[1,2,3],",
				"  events:{",
				"    init:function(){",
				"      console.log('new mc model create -> '+this.aid)",
				"    }",
				"  }",
				"})",
				"",
				"var m = new mc();",
				"var m2 = new mc();",
				"",
				"console.log(m instanceof mc);",
				"console.log(m instanceof aix.model);",
				"",
				"//通过构造器创建出的模型携带初始数据",
				"m.parse();"
				],
				"result":[
				"new mc model create -> #2",
				"new mc model create -> #3",
				"",
				"true",
				"false",
				"",
				"[1,2,3]"
				]
			}
		
		],
		"exampledemo":[
		]
	},

	"aix.view" : {
		"toptitle" : [ "aix.view" ],
		"api" : [
			"aix.view(setting)"
		],
		"param" : [
			["setting","[ 类型: Object,Null ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
			["aix view","实例化的aix.view视图容器"]
		],
		"info" : [
			"aix.view 是一个视图管理器, 用于封装视图的逻辑",
			"使用new 关键字来创建一个新的aix.view视图容器",
			"aixview集成了简单的js模版引擎,以及可以使用内置的库[ __ ]进行dom操作"
		],
		"infowarning":[
			"aixview 创建时,会自动将template属性中的字符串编译成模版,直接套入数据即可获得需要html结构",
			"_",
			"* 如果设置了url属性,则会调用底层ajax方法去获取url地址的数据并且编译成模板,[ 需要注意的是该操作是异步的 ]",
			"* 如果没有设置render方法,则会默认创建生成一个render方法,此方法是像el dom节点中渲染模板编译的数据",
			"* 如果设置了build属性为Function类型,则会将view中的模板字符串传入到build函数中调用,编译成一个自定义的值,返回到view.template上,则不会使用默认的模板引擎.build函数的this指向view本身",
			"_",
			"@ 创建aix.view的时候必须传入el节点,否则报错",
			"@ 内置模板引擎使用了 _.doom"
		],
		"table":[],
		"example":[
			{ 
				"info":"创建一个aixview视图,使用内置的模版引擎",
				"code":[
				"var v = new aix.view({",
				"  el : '#id',",
				"  template: '<div>{{#a}}</div>\\n'",
				"           +'<div>{{#b}}</div>\\n'",
				"           +'<div>{{#c}}</div>',",
				"",
				"  getRender:function(data){",
				"    return this.template(data);",
				"  }",
				"});",
				"",
				"var data = {a:1,b:2,c:3}; ",
				"",
				"console.log(v.getRender(data))"
				],
				"result":[
				"<div>1</div>",
				"<div>2</div>",
				"<div>3</div>"
				]
			}
		],
		"exampledemo":[
			"demo/aixview.html"
		]
	},

	"aix.view.extend" : {
		"toptitle" : ["aix.view - [ extend ]"],
		"api" : [
			"aix.view.extend(setting)"
		],
		"param" : [
			["setting","[ 类型: Object,Null ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
			["extend view constructor","[ 从aix.view中扩展出的自定义视图构造器 ]"]
		],
		"info" : [
			"aix.view.extend 用于生成自定义的视图构造函数",
			"通常生成视图我们使用 new aix.view() , 立即产生了一个实例化视图",
			"而new aix.view.extend()则是返回了一个视图构造器"
		],
		"infowarning":[
			"视图构造器的base属性指向了aix.view"
		],
		"table":[],
		"example":[
			{ 
				"info":"创建一个视图构造器",
				"code":[
				"var mv = new aix.view.extend({",
					"el : '#id'",
				"  events:{",
				"    init:function(){",
				"      console.log('new view create')",
				"    }",
				"  }",
				"})",
				"",
				"var view = new mv();"
				],
				"result":[
					"mv视图构造器的实例对象"
				]
			}
		
		],
		"exampledemo":[
		]
	},

	"aix.view.events" : {
		"toptitle" : ["aix.view - [ events ]"],
		"api" : [
			"view.addEvent(type,func)",
			"view.removeEvent(type,func)",
			"view.dispatch(type,func,args)",
			"view.trigger(type,func,args)"
		],
		"param" : [
			["type","[ 类型:String ]"],
			["func","[ 类型:Function,Null ]"],
			["args","[ 类型:Array,Null ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
			["view","this视图"]
		],
		"info" : [
			"view 提供了和 model一样的事件触发机制",
			"和model事件不同的地方在于, view的事件有两种:"
		],
		"infowarning":[
			"@ dom事件 - 绑定在视图的dom元素上的事件, 绑定时,需要以:分开,例如 'click:.sxz' 等于给视图内的.sxz绑定了对应的click事件 ",
			"@ 自定义事件 - 和模型事件一样, view事件并不提供一些自动触发的事件,都需要手动通过dispatch的方式去触发"
		],
		"table":[
			["事件类型","触发事件"],
			["init","init(初始化事件,一般只在视图创建的时候被调用)"]
		],
		"example":[
		],
		"exampledemo":[
			"demo/aixview.html",
			"demo/aixview2.html",
			"demo/aixview3.html"
		]
	},

	"aix.view.release" : {
		"toptitle" : ["aix.view - [ release ]"],
		"api" : [
			"view.release()"
		],
		"param" : [
			["无",""]
		],
		"paramcall" : [
		],
		"returnval" : [
			["view","this视图"]
		],
		"info" : [
			"release方法用于移除视图上所有的dom事件"
		],
		"infowarning":[
			"通过release所移除的dom事件,暂时无法还原,",
			"后续api可能可以提供还原dom事件功能"
		],
		"table":[
		],
		"example":[
		],
		"exampledemo":[
		]
	},

	"aix.view.destroy" : {
		"toptitle" : ["aix.view - [ destroy ]"],
		"api" : [
			"view.destroy(withRoot)"
		],
		"param" : [
			["withRoot","[ 类型:Booleton,Null ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
			["view","this视图"]
		],
		"info" : [
			"destory方法用于摧毁视图,包括dom事件的移除和dom节点的移除,",
			"移除之后原视图将不再可用,包括其内置的自定义事件也不再可用"
		],
		"infowarning":[
			"* 当参数withRoot设置为true是会同时移除视图的根节点 - view.el , 否则保留该节点",
			"* 强制使用已经destroy的aix视图对象会报错",
			"* 需要GC回收,请将原保存变量设置为null"
		],
		"table":[
		],
		"example":[
		],
		"exampledemo":[
		]
	},

	"_.bind" : {
		"toptitle" : ["_.bind"],
		"api" : [
			"_.bind(obj,args,...)"
		],
		"param" : [
			["obj","[类型:Object,Array]"],
			["args","[类型:任意类型]"]
		],
		"paramcall" : [
		],
		"returnval" : [
			["bind function","已经被绑定了指向的Function"]
		],
		"info" : [
			"需要bind函数的原因很简单,假设a对象中有个函数a.fn=function(){ console.log(this.a) }, 很明显, 这个函数返回了当前对象a的a属性值, 那么当b对象,引用了a.fn, 像这样 b.fn = a.fn, 则当b.fn调用时结果会输出b的a属性值, 那么,如果我们希望的是,在b引用了a.fn时,调用b.fn, 输出的结果依然是a.a的值,这个时候则需要给a.fn做绑定了."
		],
		"infowarning":[
		],
		"table":[],
		"example":[
			{ 
				"info":"为什么需要_.bind",
				"code":[
					"var a = {",
					"  a : 1,",
					"  fn:function(){",
					"    console.log(this.a)",
					"  }",
					"}",
					"",
					"var b = {",
					"  a : 4",
					"}",
					"",
					"b.fn = a.fn;",
					"",
					"a.fn();",
					"b.fn();",
					"",
					"",
					"_.bind(a,a);",
					"",
					"b.fn = a.fn",
					"b.fn()"
				],
				"result":[
					"1",
					"4",
					"1"
				]
			}
		],
		"exampledemo":[
		]
	},

	"aix.model.pipe" : {
		"toptitle" : ["aix.model - [ pipe ]"],
		"api" : [
			"model.pipe(type,url,param,success(response,xhr,event),fail(xhr,event),header)"
		],
		"param" : [
			["type"," [ 类型: String ]"],
			["url"," [ 类型: String,Null ]"],
			["param"," [ 类型: Object,Null ]"],
			["success"," [ 类型: Function,Null ]"],
			["fail"," [ 类型: Function,Null ]"],
			["header"," [ 类型: Object,Null ]"]
		],
		"paramcall" : [
			["response","[ 通过pipe api调用的ajax请求,服务端返回的response响应结果 ]"],
			["xhr","[ 发起ajax请求所创建xhr对象 ]"],
			["event","[ 浏览器bom事件的event对象 ]"]
		],
		"returnval" : [
			["model","this模型"]
		],
		"info" : [
			"pipe是一个底层的api,封装依赖于_.aix的方法，通过他可以发送ajax请求，并且自定义参数"
		],
		"infowarning":[
			"必须指定type参数，则为请求的方式，请求的方式会通过RESTFUL列表进行过滤，如果服务器端为实现restful,",
			"则大部分的请求都将会以模拟的方式( get post )发送到服务器端,",
			"如果服务器端完整实现了RESTFUL,请在框架加载后,设置aix.config.restful=true.",
			"-",
			"以下是RESTFUL仿真自动转化请求类型的列表:"
		],
		"table":[
		 ["请求类型","仿真转化"],
		 ["put","POST"],
		 ["pull","POST"],
		 ["fetch","GET"],
		 ["update","POST"],
		 ["delete","POST"]
		],
		"example":[
			{ 
				"info":"使用pipe发送ajax请求",
				"code":[
				"var m = new aix.model({",
				"  events:{",
				"    'get:success':function(responseText){",
				"       console.log(responseText)",
				"    }",
				"  }",
				"});",
				"",
				"m.pipe('get','url',null)"
				],
				"result":[
					"输出了服务器返回的结果"
				]
			}
		],
		"exampledemo":[
		]
	},

	"aix.model.aget" : {
		"toptitle" : ["aix.model - [ aget ]"],
		"api" : [
			"model.aget(url,param,success(response,xhr,event),fail(xhr,event),header)"
		],
		"param" : [
			["url"," [ 类型: String,Null ]"],
			["param"," [ 类型: Object,Null ]"],
			["success"," [ 类型: Function,Null ]"],
			["fail"," [ 类型: Function,Null ]"],
			["header"," [ 类型: Object,Null ]"]
		],
		"paramcall" : [
			["response","[ 通过pipe api调用的ajax请求,服务端返回的response响应结果 ]"],
			["xhr","[ 发起ajax请求所创建xhr对象 ]"],
			["event","[ 浏览器bom事件的event对象 ]"]
		],
		"returnval" : [
			["model","this模型"]
		],
		"info" : [
			"aget 方式直接发起了get请求,参数url可以让你灵活定义请求地址,param为请求参数对象",
			"success 和 fail 均为回调函数"
		],
		"infowarning":[
			"和fetch方法有效的区分开",
			"* 触发get事件"
		],
		"table":[],
		"example":[
			{ 
				"info":"使用pipe发送ajax请求",
				"code":[
				"var m = new aix.model()",
				"",
				"m.aget('url',null,function(res){ console.log(res) })"
				],
				"result":[
					"输出了服务器返回的结果"
				]
			}
		],
		"exampledemo":[
		]
	},

	"aix.model.fetch" : {
		"toptitle" : ["aix.model - [ fetch ]"],
		"api" : [
			"model.fetch(param,success(response,xhr,event),fail(xhr,event),header)",
			"model.sync(param,success(response,xhr,event),fail(xhr,event),header)"
		],
		"param" : [
			["param"," [ 类型: Object,Null ]"],
			["success"," [ 类型: Function,Null ]"],
			["fail"," [ 类型: Function,Null ]"],
			["header"," [ 类型: Object,Null ]"]
		],
		"paramcall" : [
			["response","[ 通过pipe api调用的ajax请求,服务端返回的response响应结果 ]"],
			["xhr","[ 发起ajax请求所创建xhr对象 ]"],
			["event","[ 浏览器bom事件的event对象 ]"]
		],
		"returnval" : [
			["model","this模型"]
		],
		"info" : [
			"fetch 方式直接发起了fetch(仿真下为get),param为请求参数.",
			"同时也可以设置header对象来设置请求时的httpheader"
		],
		"infowarning":[
			"fetch事件与aget事件不同的地方在于,fetch会触发模型数据的更改，自动将请求成功后的数据转化成JSON对象，写如模型中",
			"sync作用和fetch等同,和aget方法有效的区分开",
			"* 触发fetch事件"
		],
		"table":[],
		"example":[
			{ 
				"info":"使用pipe发送ajax请求",
				"code":[
				"var m = new aix.model()",
				"",
				"m.fetch({ id : 1 },function(){ console.log(this.parse()) })"
				],
				"result":[
					"//请求时附带 id=1 字段",
					"请求成功后，模型数据被自动替换和写入"
				]
			}
		],
		"exampledemo":[
		]
	},

	"aix.model.post" : {
		"toptitle" : ["aix.model - [ post ]"],
		"api" : [
			"model.post(url,param,success(response,xhr,event),fail(xhr,event),header)"
		],
		"param" : [
			["url"," [ 类型: String,Null ]"],
			["param"," [ 类型: Object,Null ]"],
			["success"," [ 类型: Function,Null ]"],
			["fail"," [ 类型: Function,Null ]"],
			["header"," [ 类型: Object,Null ]"]
		],
		"paramcall" : [
			["response","[ 通过pipe api调用的ajax请求,服务端返回的response响应结果 ]"],
			["xhr","[ 发起ajax请求所创建xhr对象 ]"],
			["event","[ 浏览器bom事件的event对象 ]"]
		],
		"returnval" : [
			["model","this模型"]
		],
		"info" : [
			"post为传统的post请求,如果设置了param参数为一个有效值(非Null),POST请求会忽略模型内部的数据,而改为将param作为数据提交,这样model也变成了一个有效的ajax发射器, 同时可以对数据做任意处理",
			"同时也可以设置header对象来设置请求时的httpheader"
		],
		"infowarning":[
			"* 触发post事件"
		],
		"table":[],
		"example":[
			{ 
				"info":"使用POST发送模型到指定地址",
				"code":[
				"var m = new aix.model({",
				"  url:'somewhere',",
				"  data:{",
				"    a:1,",
				"    b:2",
				"  }",
				"});",
				"",
				"m.post('here')"
				],
				"result":[
					"模型数据被直接post到了here地址,而非模型本身设置的somewhere地址"
				]
			}
		],
		"exampledemo":[
		]
	},

	"aix.model.save" : {
		"toptitle" : ["aix.model - [ save ]"],
		"api" : [
			"model.save(success(response,xhr,event),fail(xhr,event),header)"
		],
		"param" : [
			["success"," [ 类型: Function,Null ]"],
			["fail"," [ 类型: Function,Null ]"],
			["header"," [ 类型: Object,Null ]"]
		],
		"paramcall" : [
			["response","[ 通过pipe api调用的ajax请求,服务端返回的response响应结果 ]"],
			["xhr","[ 发起ajax请求所创建xhr对象 ]"],
			["event","[ 浏览器bom事件的event对象 ]"]
		],
		"returnval" : [
			["model","this模型"]
		],
		"info" : [
			"save为传统的post请求,行为是将model模型数据提交到模型内置的url地址",
			"同时也可以设置header对象来设置请求时的httpheader"
		],
		"infowarning":[
			"* 触发save事件"
		],
		"table":[],
		"example":[
			{ 
				"info":"使用save保存模型数据",
				"code":[
				"var m = new aix.model({",
				"  url:'somewhere',",
				"  data:{",
				"    a:1,",
				"    b:2",
				"  }",
				"});",
				"",
				"m.save(null,null,{ 'Content-type' : 'application/json' })"
				],
				"result":[
					"模型数据将以MIME 标准JSON字符串的格式保存到后台"
				]
			}
		],
		"exampledemo":[
		]
	},

	"_.reverse" : {
		"toptitle" : ["_.reverse"],
		"api" : [
			"_.reverse(arr)"
		],
		"param" : [
			["arr","[ 类型:Array ]"]
		],
		"paramcall" : [
			[]
		],
		"returnval" : [
			["reverse array","返回被逆序的数组"]
		],
		"info" : [
			"reverse 和原生的array.reverse没有什么区别, 不过当传入参数不是真实数组的时候,会返回一个空的数组"
		],
		"infowarning":[
		],
		"table":[],
		"example":[
		],
		"exampledemo":[
		]
	},

	"_.pluck" : {
		"toptitle" : ["_.pluck"],
		"api" : [
			"_.pluck(list,mapkey)"
		],
		"param" : [
			["list","[ 类型:Array,Object ]"],
			["mapkey","[ 类型:String,Number ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
			["pluck array","返回对应mapkey的值集合"]
		],
		"info" : [
			"_.pluck 用于获取数组对象集合中的某个键值对组"
		],
		"infowarning":[
		],
		"table":[],
		"example":[
			{ 
				"info":"获取组内的所有成员姓名",
				"code":[
					"var stooges = [{name: 'moe', age: 40}, {name: 'larry', age: 50}, {name: 'curly', age: 60}];",
					"_.pluck(stooges, 'name');"
				],
				"result":[
					"['moe', 'larry', 'curly']"
				]
			}
		],
		"exampledemo":[
		]
	},

	"_.groupby" : {
		"toptitle" : [],
		"api" : [
			""
		],
		"param" : [
			[]
		],
		"paramcall" : [
			[]
		],
		"returnval" : [
			[]
		],
		"info" : [
			""
		],
		"infowarning":[
		],
		"table":[],
		"example":[
			{ 
				"info":"",
				"code":[
					""
				],
				"result":[
					""
				]
			}
		],
		"exampledemo":[
		]
	},

	"_.toarray" : {
		"toptitle" : ["_.toarray"],
		"api" : [
			"_.toarray(obj)"
		],
		"param" : [
			["obj","[ 类型:Object ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
		],
		"info" : [
			"抽取对象的值,集合成数组"
		],
		"infowarning":[
		],
		"table":[],
		"example":[
			{ 
				"info":"对象转化为数组",
				"code":[
				"var o = {a:1,b:2,c:3};",
				"",
				"console.log(_.toarray(o));"
				],
				"result":[
					"[1,2,3]"
				]
			}
		],
		"exampledemo":[
		]
	},

	"_.forarray" : {
		"toptitle" : ["_.forarray"],
		"api" : [
			"_.forarray(obj)"
		],
		"param" : [
			["obj","[ 类型:Object ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
		],
		"info" : [
			"和toarray 类似，同样是将对象转化成数组，此转化方法包含了对象的key(键)"
		],
		"infowarning":[
		],
		"table":[],
		"example":[
			{ 
				"info":"对象转化为数组",
				"code":[
				"var o = {a:1,b:2,c:3};",
				"",
				"console.log(_.forarray(o));"
				],
				"result":[
					"[{a:1},{b:2},{c:3}]"
				]
			}
		],
		"exampledemo":[
		]
	},

	"_.pairs" : {
		"toptitle" : ["_.pairs"],
		"api" : [
			"_.pairs(obj)"
		],
		"param" : [
			["obj","[ 类型:Object ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
		],
		"info" : [
			"类似forarray，将对象转化为数组，键值对存于数组中"
		],
		"infowarning":[
		],
		"table":[],
		"example":[
			{ 
				"info":"对象转化为数组",
				"code":[
				"var o = {a:1,b:2,c:3};",
				"",
				"console.log(_.pairs(o));"
				],
				"result":[
					"[['a',1],['b',2],['c',3]]"
				]
			}
		],
		"exampledemo":[
		]
	},

	"_.random" : {
		"toptitle" : ["_.random"],
		"api" : [
			"_.random(min,max)"
		],
		"param" : [
			["min","[ 类型:Number ]"],
			["max","[ 类型:Number ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
		],
		"info" : [
			"random是一个用来生成随机整数的函数",
			"生成限定范围内的随机整数，参数如果省略max则会将min自动变成最大值"
		],
		"infowarning":[
		],
		"table":[],
		"example":[
			{ 
				"info":"生成1~10范围内的随机整数",
				"code":[
					"_.random(1,10)"
				],
				"result":[
					"随机数(1-10)"
				]
			}
		],
		"exampledemo":[
		]
	},

	"_.bale" : {
		"toptitle" : ["_.bale"],
		"api" : [
			"_.bale(extend1,extend2,notThisproperty)"
		],
		"param" : [
			["extend1","[ 类型:Object ]"],
			["extend2","[ 类型:Object ]"],
			["notThisproperty","[ 类型:Array,String ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
		],
		"info" : [
			"和_.compose,_.extend一样,将extend2参数2的属性覆盖到extend1上",
			"与之前不同的是，这种合并会产生一个新的对象，而不是在原有的对象extend1上做修改"
		],
		"infowarning":[
		],
		"table":[],
		"example":[
			{ 
				"info":"合并生成一个新的对象",
				"code":[
				"var a = {a:1} , b = {b:1};",
				"",
				"var clone = _.bale(a,b);",
				"",
				"console.log(a);",
				"console.log(b);",
				"console.log(clone);",
				"console.log(clone===a);"
				],
				"result":[
					"{a:1}",
					"{b:1}",
					"{a:1,b:1}",
					"false"
				]
			}
		],
		"exampledemo":[
		]
	},

	"_.shuffle" : {
		"toptitle" : ["_.shuffle"],
		"api" : [
			"_.shuffle(arr)"
		],
		"param" : [
			["arr","[ 类型:Array ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
		],
		"info" : [
			"shuffle 是用了 Fisher-Yates shuffle 算法,通过随机数赋值进行乱序"
		],
		"infowarning":[
		],
		"table":[],
		"example":[
			{ 
				"info":"数组乱序",
				"code":[
					"var a = [1,2,3,4,5,6,7,8,9]",
					"console.log(_.shuffle(a))"
				],
				"result":[
					"乱序的数组"
				]
			}
		],
		"exampledemo":[
		]
	},

	"_.trim" : {
		"toptitle" : ["_.trim"],
		"api" : [
			"_.trim(str)"
		],
		"param" : [
			["str","[ 类型:String ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
		],
		"info" : [
			"trim 用于去除字符串首尾空格"
		],
		"infowarning":[
		],
		"table":[],
		"example":[
			{ 
				"info":"去除首尾空格",
				"code":[
					"var a = ' String  ';",
					"console.log(_.trim(a))"
				],
				"result":[
					"'String'"
				]
			}
		],
		"exampledemo":[
		]
	},

	"_.merge" : {
		"toptitle" : ["_.merge"],
		"api" : [
			"_.merge(arg,arg1,...)"
		],
		"param" : [
			["arg","[ 类型:Array ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
		],
		"info" : [
			"_.merge 用于合并多个数组，且没有重复的项目"
		],
		"infowarning":[
		],
		"table":[],
		"example":[
			{ 
				"info":"合并数组",
				"code":[
					"var a = [1,2,3]",
					"var a1 = [3,4,5]",
					"var a2 = [2,6,7]",
					"var a3 = [1,2,5]",
					"var a4 = [6,4,1]",
					"",
					"_.merge(a,a1,a2,a3,a4)"
				],
				"result":[
					"[1,2,3,4,5,6,7]"
				]
			}
		],
		"exampledemo":[
		]
	},

	"_.isequal" : {
		"toptitle" : ["_.isequal"],
		"api" : [
			"_.isequal(a,b,strictmode)"
		],
		"param" : [
			["a,b","[ 类型:任意类型 ]"],
			["strictmode","[ 类型:Booleton ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
		],
		"info" : [
			"_.isequal 是一个比较两变量是否相等的函数，和原生表达式不一样的地方在于",
			"对象a{a:1} 和 对象b{a:1} ,在逻辑上是两个不同的变量，正常情况下是用==或者===都是不想等的，因为属于两个完全不同的对象指针,但是由于两个对象的键值对完全相同，所以isequal会判定两者相等",
			"数组则同理, [1]其实和[1]并不相等，是两个完全不同的数组，但是从数值上来看是一摸一样的"
		],
		"infowarning":[
			"_.isequal 赋予第三个参数 strictmode 为真值(true)时,比较结果相当于 a===b"
		],
		"table":[],
		"example":[
			{ 
				"info":"比较变量",
				"code":[
					"var a = [1,2,3]",
					"var b = [1,2,3]",
					"",
					"var c = {a:1,b:2}",
					"var d = {a:1,b:2}",
					"",
					"console.log(a==b);",
					"console.log(a===b);",
					"console.log(_.isequal(a,b));",
					"",
					"console.log(c==d);",
					"console.log(c===d);",
					"console.log(_.isequal(c,d));"
				],
				"result":[
					"false",
					"false",
					"true",
					"",
					"false",
					"false",
					"true"
				]
			}
		],
		"exampledemo":[
		]
	},

	"_.requery" : {
		"toptitle" : ["_.requery"],
		"api" : [
			"_.requery(serilaizeArray)"
		],
		"param" : [
			["serilaizeArray","[ 类型:Array ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
		],
		"info" : [
			"用于将通过jquery，zepto 或者自带的 __ DOM库api serilaizeArray所序列化出来的数组，转化成一个key->value的键值对对象."
		],
		"infowarning":[
		],
		"table":[],
		"example":[
			{ 
				"info":"将jquery serilaizeArray的数据转化成标准对象",
				"code":[
					"var dataArray = [",
					"   {name:'Jake',value:'?'},",
					"   {name:'Cloud',value:2},",
					"   {name:'Sam',value:3}",
					"];",
					"console.log(_.requery(dataArray))"
				],
				"result":[
					"{",
					"  Cloud:2",
					"  Jake:'?'",
					"  Sam:3",
					"}"
				]
			}
		],
		"exampledemo":[
		]
	},

	"_.async" : {
		"toptitle" : ["_.async"],
		"api" : [
			"_.async(fn,time)"
		],
		"param" : [
			["fn","[ 类型:Function ]"],
			["time","[ 类型:Number,Null ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
		],
		"info" : [
			"和setTimeout作用等同，如果不传入time时间，则等于将函数设置成一个异步函数"
		],
		"infowarning":[
		],
		"table":[],
		"example":[
			{ 
				"info":"异步执行",
				"code":[
					"console.log(1);",
					"_.async(function(){console.log(3);});",
					"console.log(2);"
				],
				"result":[
					"1",
					"2",
					"3"
				]
			}
		],
		"exampledemo":[
		]
	},

	"_.combom" : {
		"toptitle" : ["_.combom"],
		"api" : [
			"_.combom(list,fn)"
		],
		"param" : [
			["list","[ 类型:Array,Object ]"],
			["fn","[ 类型:Function ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
		],
		"info" : [
			"_.combom 作为一个查询条件，返回在List中满足条件的第一个数值,类似于findindex的作用"
		],
		"infowarning":[
		],
		"table":[],
		"example":[
			{ 
				"info":"返回数组中寻找到的第一个满足4的倍数数值",
				"code":[
					"var list = [1,2,3,4,5,6,7,8];",
					"console.log(_.combom(list,function(item){",
					"  return item%4===0;",
					"}));"
				],
				"result":[
					"4"
				]
			}
		],
		"exampledemo":[
		]
	},

	"_.once" : {
		"toptitle" : ["_.once"],
		"api" : [
			"_.once(fn)"
		],
		"param" : [
			["fn","[ 类型:Function ]"]
		],
		"paramcall" : [
		],
		"returnval" : [
			["once Func","只能执行一次的函数"]
		],
		"info" : [
			"_.once的作用是将原本可以无限次反复调用执行的函数，设置成只能执行一次.",
			" 传入的参数fn为目标函数, 返回该函数的变体，此函数仅能执行一次.",
			"执行一次之后无效，反复调用不会执行，也不会报错."
		],
		"infowarning":[
			"_.once 是基于 _.part 封装的，其效果等同于 _.part(fn,1)"
		],
		"table":[],
		"example":[
			{ 
				"info":"只执行一次的函数",
				"code":[
					"var a = 1;",
					"var fn = function(){ a++ };",
					"var onefn = _.once(fn);",
					"",
					"",
					"onefn()",
					"console.log(a)",
					"",
					"",
					"// 再调用两次",
					"onefn()",
					"onefn()",
					"console.log(a)"
				],
				"result":[
					"2",
					"// 发现还是2 ",
					"2"
				]
			}
		],
		"exampledemo":[
		]
	},

	"_.part" : {
		"toptitle" : ["_.part"],
		"api" : [
			"_.part(fn,times)"
		],
		"param" : [
			["fn","[ 类型:Function ]"],
			["times","[ 类型:Number,String ]"]
		],
		"paramcall" : [
			["times Func","能执行times次的函数"]
		],
		"returnval" : [
		],
		"info" : [
			"_.part 作用是可以创建一个能执行n次的函数，执行n次之后，则不再执行",
			"调用part则会返回该函数的变体"
		],
		"infowarning":[
		],
		"table":[],
		"example":[
			{ 
				"info":"创建一个执行3次的函数",
				"code":[
					"var str = ''",
					"var fn = function(){ str+=' look'; };",
					"var tfn = _.part(fn,3)",
					"",
					"for(var i=0;i<100;i++){",
					"  tfn();",
					"}",
					"",
					"console.log(str);"
				],
				"result":[
					" look look look"
				]
			}
		],
		"exampledemo":[
		]
	},

	"_.ua" : {
		"toptitle" : ["_.ua"],
		"api" : [
			"_.ua"
		],
		"param" : [
		],
		"paramcall" : [
		],
		"returnval" : [
		],
		"info" : [
			"_.ua 返回浏览器 useragent 的高级封装。",
			"里面包含浏览器的所有信息:",
			"  - 浏览器类型",
			"  - 浏览器版本 ",
			"  - 设备类型",
			"  - 设备平台",
			"  - 操作系统",
			"  - 当前默认语言(IE11+)"
		],
		"infowarning":[
			"可发送到后台作为设备统计依据"
		],
		"table":[],
		"example":[
		],
		"exampledemo":[
		]
	},

	"_.pagepref" : {
		"toptitle" : ["_.pagepref"],
		"api" : [
			"_.pagepref()"
		],
		"param" : [
		],
		"paramcall" : [
		],
		"returnval" : [
		],
		"info" : [
			"直接调用后执行，返回当前HTML中的统计信息:",
			"  - 该页面包含的所有样式列表 - 对应的元素",
			"  - 该页面包含的所有ID列表 - 对应的元素",
			"  - 该页面包含的所有图片 - 图片地址",
			"  - 该页面包含的所有脚本 - 脚本数量以及链接",
			"  - 该页面包含的所有链接 - 链接地址以及数量",
			"  - cookies",
			"  - 本地存储",
			"  - HTML 标签数量",
			"  - HTML 标签总和长度"
		],
		"infowarning":[
			"一般用于检测样式规范，ID命名规范，快速查看cookie以及本地存储"
		],
		"table":[],
		"example":[
		],
		"exampledemo":[
		]
	}

}

